/**
## Flow over an obstacle

On this page we embed a free slip mountain into a domain that is filled with an viscous fluid. The free-slip condition is not free of rotation along a curved boundary. Therefore, simple potential flow theory does not apply and we solve the equations for fluid motion.  
*/
#include "embed.h"
#include "navier-stokes/centered.h"

int kVerbose = 1;
#define MU (2.65e-6)
#include "stress_omega.h"
#include "oystein/adapt_wavelet_leave_interface.h"
#include "sander/output_htg.h"

#define MAX_LEVEL (12)
#define MIN_LEVEL (5)

#define UBAR (1.0)
/**
We set a free-slip boundary for the x and y components.
*/

u.n[embed] = dirichlet (0);
u.t[embed] = dirichlet (0);
rhok[embed] = dirichlet (0);
rhoe[embed] = dirichlet ( 10.0*(6.0*MU/RHO) / (0.075/(1<<(2*MAX_LEVEL))) );
Rxx[embed] = dirichlet (0);
Rxy[embed] = dirichlet (0);
Rxz[embed] = dirichlet (0);
Ryy[embed] = dirichlet (0);
Ryz[embed] = dirichlet (0);
Rzz[embed] = dirichlet (0);

face vector muc[];
face vector av[];

int main(){
  L0 = 0.252;
  N = 512;
  kTurbConstants.k_0 = 0.001;
  kTurbConstants.omega_0 = 420.0;

  a = av;
  CFL = 0.4;
  DT = 0.01;
  origin(0, -L0/2.0 + L0/(1<<(1+MAX_LEVEL)) , 0);

    init_grid(N);
    periodic(right);
#if dimension > 2
    periodic(back);
#endif
    run();
}


double MagUbarAve(vector u, scalar cm)
{
    double magUbarAve = 0;
    double V_ = 0;
    foreach(reduction(+:magUbarAve) reduction(+:V_))
    {
        magUbarAve += u.x[]*cm[];
	      V_ += cm[];
    }

    magUbarAve /= V_;

    return magUbarAve;
}


event acceleration (i++)
{
   // double avg = normf(u.x).avg;
    double usum = 0;
    double dsum = 0;

    foreach_face(reduction(+:usum) reduction(+:dsum))
    {
        usum += x > 0 ? 0.0 : uf.x[]*fm.x[];
	      dsum += x > 0 ? 0.0 : fm.x[];
    }

    foreach_face(x)
    {
        av.x[] += x > 0 ? 0.0 : fm.x[]*(UBAR - usum/(dsum+1e-6))/max(dt,1e-6);
    }

    boundary((scalar *){av});
}


event properties(i=0){
  foreach_face()
    muc.x[] = fm.x[]*(2.65e-6);
  boundary((scalar*){muc});
}


double hump(double xc)
{
    double x = 1000.0*xc;
    double h = 0;

    if (x > 198) x = 252 - x;

    if (x >= 0 && x < 9)
    {
        h =
            28
          + 6.775070969851E-03*x*x
          - 2.124527775800E-03*x*x*x;
    }
    else if (x >= 9 && x < 14)
    {
        h =
            25.07355893131
          + 0.9754803562315*x
          - 1.016116352781E-01*x*x
          + 1.889794677828E-03*x*x*x;
    }
    else if (x >= 14 && x < 20)
    {
        h =
            2.579601052357E+01
          + 8.206693007457E-01*x
          - 9.055370274339E-02*x*x
          + 1.626510569859E-03*x*x*x;
    }
    else if (x >= 20 && x < 30)
    {
        h =
            4.046435022819E+01
          - 1.379581654948E+00*x
          + 1.945884504128E-02*x*x
          - 2.070318932190E-04*x*x*x;
    }
    else if (x >= 30 && x < 40)
    {
        h =
            1.792461334664E+01
          + 8.743920332081E-01*x
          - 5.567361123058E-02*x*x
          + 6.277731764683E-04*x*x*x;
    }
    else if (x >= 40 && x < 54)
    {
        h =
            max
            (
                0,
                5.639011190988E+01
              - 2.010520359035E+00*x
              + 1.644919857549E-02*x*x
              + 2.674976141766E-05*x*x*x
            );
    }

    return h/1000.0;
}

/**
We use particles to check if the flow does not penetrate the embedded boundary. 
*/
event init (t = 0){
  mu = muc;
do{
  scalar phi[];
  foreach_vertex(){
    phi[] = min(y - hump(x), 0.085 - y);
}
  fractions(phi, cs, fs);

foreach()
  u.x[] = cs[] > 0.01 ? (0.7*UBAR)*cs[] : 0.0;

  boundary(all);
}
#if TREE
    while (
#if dimension == 2
adapt_wavelet_leave_interface((scalar *){u},{cs},(double[]){2e-3,2e-3},MAX_LEVEL-4,MAX_LEVEL-3,MIN_LEVEL,1).nf
#elif dimension == 3
adapt_wavelet_leave_interface((scalar *){u},{cs},(double[]){5e-3,5e-3,5e-3},MAX_LEVEL-4,MAX_LEVEL-3,MIN_LEVEL,1).nf
#endif
);
#else
    while (0);
#endif

  output_ppm(cs, n = 512, file = "cs.png", min = 0, max = 1);
}

#if TREE
event adapt (i++) {
  if (t > 1.0)
  {
  #if dimension == 2
    adapt_wavelet_leave_interface((scalar *){u},{cs},(double[]){2e-3,2e-3},MAX_LEVEL,MAX_LEVEL,MIN_LEVEL,1);
  #elif dimension == 3
    adapt_wavelet_leave_interface((scalar *){u},{cs},(double[]){5e-3,5e-3,5e-3},MAX_LEVEL,MAX_LEVEL,MIN_LEVEL,1);
  #endif
    } else {
  #if dimension == 2
    adapt_wavelet_leave_interface((scalar *){u},{cs},(double[]){2e-3,2e-3},MAX_LEVEL-4,MAX_LEVEL-3,MIN_LEVEL,1);
  #elif dimension == 3
    adapt_wavelet_leave_interface((scalar *){u},{cs},(double[]){5e-3,5e-3,5e-3},MAX_LEVEL-4,MAX_LEVEL-3,MIN_LEVEL,1);
  #endif
  }
}
#endif


/**
To help the accurate evaluation of the viscous term, we enforce the time step according to a limit cell-Peclet number. 
*/
event stability (i++) {
    CFL = 0.2;
}
/**
We generate a movie displaying the flow via $u_x$ and the tracers, these do not penetrate the boundary. 

![The particles follow the flow along the boundary](embed-freeslip/movie.mp4)
*/
event snapshot(t += 0.05;t<=5.0) {
#if _MPI  
  MPI_Barrier(MPI_COMM_WORLD);  
#endif
  dump(file="restart", unbuffered=false);
#if _MPI  
  MPI_Barrier(MPI_COMM_WORLD);  
#endif
  fprintf (stderr, "%d : Dump restart file.\n", i);
}

event write2htg (t += 0.05;t<=5.0) {
  scalar vort[], p_rgh[];
  vorticity (u, vort);

  vector U[]; // to slove the compatibility issue of restore/dump
  foreach()
    foreach_dimension()
      U.x[] = u.x[];
  boundary((scalar *){U});
  
  char fname[50];
  sprintf(fname, "result.%06d", i);
  scalar* output_scalars = {cs, p, vort};
  rsm_model_output(&output_scalars);
  output_htg(output_scalars,(vector *){U}, ".", fname, i, t);

  fprintf (stderr, "write output to %s\n", fname);
}

/*
We also check if Bernoulli's law is statisfied. 
*/
/*
event stop(t = 10){
  char fname[99];
  sprintf(fname, "data%d", N);
  FILE * fp = fopen(fname, "w");
  foreach(){
    if (y < L0/4 && fabs(x - L0/2.) < L0/4 && cm[] > 0.1)
      fprintf(fp, "%g\t%g\n", p[], sq(u.x[]) + sq(u.y[]));
  }
*/
/**
We can observe that indeed vorticty diffuses into the domain. Also note that the sign of the boundary curvature dictates the sign of the vorticity that diffuses into the domain. 

![A wake structure forms at the lee side of the free slip obstacle](embed-freeslip/vorticity.png)

A true eye-opener. 
*/
